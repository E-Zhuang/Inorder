#BlueJ class context
comment0.target=BSTree
comment0.text=\n\ \ Implementation\ of\ lists,\ using\ singly\ linked\ elements.\n\n\ @author\ \ \ \ \ G.\ Peck\n\ @created\ \ \ \ April\ 27,\ 2002\n
comment1.params=
comment1.target=BSTree()
comment1.text=\n\ \ Constructor\ for\ the\ BSTree\ object\n\ \ Generates\ an\ empty\ list.\n
comment10.params=target
comment10.target=TreeNode\ deleteTargetNode(TreeNode)
comment11.params=
comment11.target=int\ size()
comment11.text=\n\ \ Returns\ the\ number\ of\ elements\ in\ this\ list.\n\n\ @return\ \ \ \ number\ of\ elements\ in\ this\ list.\n
comment12.params=
comment12.target=void\ inOrder()
comment12.text=\n\ \ Prints\ all\ the\ elements\ of\ the\ list\n
comment2.params=
comment2.target=boolean\ isEmpty()
comment2.text=\n\ \ Returns\ true\ if\ this\ list\ contains\ no\ elements.\n\n\ @return\ \ \ \ true\ iff\ the\ list\ is\ empty\n
comment3.params=
comment3.target=java.lang.Object\ getRoot()
comment3.text=\n\ \ Returns\ the\ root's\ element\ in\ this\ list.\n\n\ @return\ \ the\ root's\ element\ in\ the\ linked\ list.\n
comment4.params=element
comment4.target=void\ insert(java.lang.Comparable)
comment4.text=\n\ \ Inserts\ the\ specified\ element\ at\ the\ position\ in\ this\ list\n\ \ according\ to\ the\ natural\ ordering\ of\ its\ elements.\ All\ elements\n\ \ in\ the\ list\ must\ implement\ the\ Comparable\ interface.\ Shifts\n\ \ the\ element\ currently\ at\ that\ position\ (if\ any)\ and\ any\n\ \ subsequent\ elements\ to\ the\ right.\n\n\ @param\ \ element\ \ element\ to\ be\ inserted\n
comment5.params=node\ element
comment5.target=TreeNode\ insertHelper(TreeNode,\ java.lang.Comparable)
comment6.params=valueToFind
comment6.target=TreeNode\ find(java.lang.Comparable)
comment6.text=\n\ \ Returns\ the\ first\ occurrence\ of\ the\ specified\ element,\ or\ null\n\ \ if\ the\ List\ does\ not\ contain\ this\ element.\n\n\ @param\ \ element\ \ element\ to\ search\ for.\n\ @return\ \ \ \ \ \ \ \ first\ occurrence\ of\ the\ specified\ element,\ or\ null\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ if\ the\ list\ doesn\ not\ contain\ the\ element.\n
comment7.params=myNode\ valueToFind
comment7.target=TreeNode\ findHelper(TreeNode,\ java.lang.Comparable)
comment8.params=target
comment8.target=TreeNode\ delete(java.lang.Comparable)
comment8.text=\n\ \ Removes\ the\ first\ occurrence\ of\ the\ specified\ element\ in\n\ \ this\ list.\ If\ the\ list\ does\ not\ contain\ the\ element,\ it\n\ \ is\ unchanged.\n\n\ @param\ \ element\ \ element\ to\ be\ removed\ from\ this\ list,\ if\ present.\n\ @return\ \ \ \ \ \ \ \ \ \ removes\ first\ element\ with\ matching\ element,\ if\ any.\n
comment9.params=node\ target
comment9.target=TreeNode\ deleteHelper(TreeNode,\ java.lang.Comparable)
numComments=13
